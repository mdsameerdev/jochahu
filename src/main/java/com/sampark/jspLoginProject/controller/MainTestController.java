package com.sampark.jspLoginProject.controller;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.mapping.Map;
import org.mockito.internal.matchers.Null;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.sampark.jspLoginProject.model.Apps;
import com.sampark.jspLoginProject.model.Controls;
import com.sampark.jspLoginProject.model.DesktopFormDescriptions;
import com.sampark.jspLoginProject.model.DesktopTabs;
import com.sampark.jspLoginProject.model.Draftings;
import com.sampark.jspLoginProject.model.FunctionsList;
import com.sampark.jspLoginProject.model.MainMenu;
import com.sampark.jspLoginProject.model.Menu;
import com.sampark.jspLoginProject.model.MobileAppTab;
import com.sampark.jspLoginProject.model.MobileFunction;
import com.sampark.jspLoginProject.model.Modules;
import com.sampark.jspLoginProject.model.Notifications;
import com.sampark.jspLoginProject.model.Placements;
import com.sampark.jspLoginProject.model.PlateForms;
import com.sampark.jspLoginProject.model.Softwares;
import com.sampark.jspLoginProject.model.Source;
import com.sampark.jspLoginProject.model.SubTab;
import com.sampark.jspLoginProject.model.Tabs;
import com.sampark.jspLoginProject.model.Tasks;
import com.sampark.jspLoginProject.model.TatAndCrossCheckingTab;
import com.sampark.jspLoginProject.model.UserRights;
import com.sampark.jspLoginProject.repository.AppRepository;
import com.sampark.jspLoginProject.repository.ControlsRepositoy;
import com.sampark.jspLoginProject.repository.DesktopFromDescriptionRepository;
import com.sampark.jspLoginProject.repository.DesktopTabRepository;
import com.sampark.jspLoginProject.repository.DraftingRepository;
import com.sampark.jspLoginProject.repository.FunctionsRepository;
import com.sampark.jspLoginProject.repository.MainMenuRepository;
import com.sampark.jspLoginProject.repository.MenuRepository;
import com.sampark.jspLoginProject.repository.MobileAppTabRepository;
import com.sampark.jspLoginProject.repository.MobileFuntionRepository;
import com.sampark.jspLoginProject.repository.ModuleRepository;
import com.sampark.jspLoginProject.repository.NotificationRepository;
import com.sampark.jspLoginProject.repository.PlacementsRepository;
import com.sampark.jspLoginProject.repository.PlateFormsRepository;
import com.sampark.jspLoginProject.repository.SoftwareRepositoty;
import com.sampark.jspLoginProject.repository.SourceRepository;
import com.sampark.jspLoginProject.repository.SubTabRepository;
import com.sampark.jspLoginProject.repository.TabReposity;
import com.sampark.jspLoginProject.repository.TasksRepository;
import com.sampark.jspLoginProject.repository.TatAndCrossCheckingTabRepository;
import com.sampark.jspLoginProject.repository.UserRepository;
import com.sampark.jspLoginProject.service.AppsService;
import com.sampark.jspLoginProject.service.DesktopFormDescriptionService;
import com.sampark.jspLoginProject.service.FunctionsService;
import com.sampark.jspLoginProject.service.MobileAppTabService;
import com.sampark.jspLoginProject.service.NotificationService;
import com.sampark.jspLoginProject.service.SourceService;
import com.sampark.jspLoginProject.service.TasksService;
import com.sampark.jspLoginProject.service.TatAndCrossCheckingTabService;



//@RequestMapping(path = "/cki") // This means URL's start with /demo (after Application path)
@Controller // This means that this class is a Controller
public class MainTestController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	
	
	

	
	
	@Autowired
	private ModuleRepository moduleRepository;
	@Autowired
	private SoftwareRepositoty  softwareRepositoty;
	@Autowired
	private MenuRepository menuRepository;
	@Autowired
	private TabReposity tabReposity;
	@Autowired
	private SubTabRepository subTabRepository;
	@Autowired
	private SourceRepository sourceRepository;
	@Autowired
	private FunctionsRepository functionsRepository;
	@Autowired
	private PlacementsRepository placementsRepository;
	@Autowired
	private TasksRepository tasksRepository;
	@Autowired
	private AppRepository appRepository;
	@Autowired
	private PlateFormsRepository plateFormsRepository;
	@Autowired
	private NotificationRepository notificationRepository;
	@Autowired
	private MobileFuntionRepository mobileFuntionRepository;
	
	@Autowired
	private MobileAppTabRepository mobileAppTabRepository;
	
	
	
	
	@Autowired
	private TatAndCrossCheckingTabRepository tatAndCrossCheckingTabRepository;
	
	
	
	@Autowired
	private MainMenuRepository mainMenuRepository;
	
	@Autowired
	private DesktopTabRepository desktopTabRepository;
	
	@Autowired
	private ControlsRepositoy controlsRepositoy;
	
	
	@Autowired
	private DesktopFromDescriptionRepository desktopFromDescriptionRepository;
	
	
	@Autowired
	private DraftingRepository draftingRepository;
	
	
	@Autowired
	SourceService sourceService;
	
	
	@Autowired
	FunctionsService functionsService;
	
	
	@Autowired
	TasksService tasksService;
	
	
	@Autowired
	AppsService appsService;
	
	@Autowired
	MobileAppTabService mobileAppTabService;
	
	
	@Autowired
	NotificationService notificationService;
	
	
	@Autowired
	TatAndCrossCheckingTabService tatAndCrossCheckingTabService;
	
	@Autowired
	DesktopFormDescriptionService  desktopFormDescriptionService;

	public List<Modules> modulelist;
	public List<Menu>menuList;
	public List<Softwares>softwareList;
	public List<Tabs>tabList;
	public List<SubTab>subTabList;
	public List<Source>sourceList;
	public List<FunctionsList>functionList;
	public List<Placements>placementList;
	public List<Apps>appList;
	public List<PlateForms> plateFormsList;
	public List<MobileFunction>mobileFuctionList;
	public List<MainMenu>mainMenuList;
	public List<DesktopTabs>desktopTabList;
	public List<Controls>controlList;
	public List<DesktopFormDescriptions>desktopFormDescriptionList;
	
	public List<Draftings>draftingList;
	
	public Draftings ds=new Draftings();
	

/*	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
*/	
	
	
	
	  @RequestMapping(value="/userright")
	    public String showLoginPage(ModelMap model){
	        return "userright";
	        
	    }
	
	  @RequestMapping(value="/add_desktop_controls")
	    public String showLoginPa(ModelMap model){
	        return "dynamictab";
	        
	    }
	
	
	
	 @RequestMapping(value="/add_source", method = RequestMethod.POST)
	public  String addNewSource(ModelMap model, @RequestParam String name,@RequestParam String source )
	{
		
		boolean isValidSource=sourceService.validateSource(name, source);
		
		if(isValidSource)
		{
			
		model.put("add_source_e", "Field can't be empty");
			 return "redirect:dynamictab";
		}
		else {
			{
				
				Source src=new Source();
				src.setName(name);
				src.setSource(source);
				sourceRepository.save(src);
				
				
				model.put("add_source", "Source Added Succesfuly");
				// return new ModelMap("recordSave", "Source Added Succesfuly");
				 return "redirect:dynamictab";
				
			}
		}
		
		
		
	
		
	}
	 
	 
	 @RequestMapping(value="/add_new_task", method = RequestMethod.POST)
		public  String addNewTask(ModelMap model, @RequestParam String event,@RequestParam String subject,@RequestParam String action
				,@RequestParam String name,@RequestParam String description,@RequestParam String nextTask, @RequestParam(value = "calanderLog", required = false) String calanderLog)
		{
		 
		 
		 
		 boolean flagCalanderLog=false;
		 
		 if(calanderLog!=null)
		 {
			 
			
			 
			 if(calanderLog!=null)
			 {
				flagCalanderLog=true ;
			 }
			 else
			 {
				 
				 flagCalanderLog=true;
				
			 }
			
			 
			 
			 
		 }
			
			boolean isValidSource=tasksService.checkValidation(event, subject, action, name, description, nextTask);
			
			if(isValidSource)
			{
				Tasks src=new Tasks();
				src.setEvent(event);
				src.setAction(action);
				src.setName(name);
				src.setDescription(description);
				src.setNewTask(nextTask);
				src.setCalanderLog(flagCalanderLog);
				tasksRepository.save(src);
				ds.setCalenderLog(flagCalanderLog);
				
				
				model.put("recordSave", "Source Added Succesfuly");
				 return "Source Added Succesfuly";
			}
			else {
				{
//					model.put("errorMessage", "Field can't be empty");
					
					 model.put("errorMessage", "Invalid Credentials");
		            return "data not saved";
		        
				}
			}
			
			
			
		
			
		}
	 
	 
	 @RequestMapping(value="/add_mobile_tab", method = RequestMethod.POST)
		
		public @ResponseBody String addMobileTab(ModelMap model, @RequestParam String appName,
				@RequestParam String menuName,@RequestParam String funName
				,@RequestParam String desciption)
		{
		 
		 
		 
		 boolean flagCalanderLog=false;
			 
			 
		 
			
			boolean isValidSource=mobileAppTabService.checkValidation(appName, menuName, funName,desciption);
			
			if(isValidSource)
			{
				
				MobileAppTab mobileAppTab=new MobileAppTab();
				
				
				mobileAppTab.setSelectedAppName(appName);
				mobileAppTab.setSelectedMenuName(menuName);
				mobileAppTab.setSelectedFunctionName(funName);
				mobileAppTab.setDescription(desciption);
				
				mobileAppTabRepository.save(mobileAppTab);
				
				
				model.put("recordSave", "Source Added Succesfuly");
				 return "redirect:dynamictab";
			}
			else {
				{
//					model.put("errorMessage", "Field can't be empty");
					
					 model.put("errorMessage", "Invalid Credentials");
					 return "redirect:dynamictab";
		        
				}
			}
			
		}
	
	 
	 @RequestMapping(value="/add_tat_and_cross_checking_tab", method = RequestMethod.POST)
		
		public  String addTatAndCrossChecking(ModelMap model,@RequestParam String event, @RequestParam String colorCode,@RequestParam String notiOne,
				@RequestParam String notiTwo,@RequestParam String notiThree
				,@RequestParam String finalAction)
		{
		 
		 
		 
			
			boolean isValidSource=tatAndCrossCheckingTabService.checkValidation(event, colorCode, notiOne, notiTwo, notiThree, finalAction);
			
			if(isValidSource)
			{
				
				TatAndCrossCheckingTab tcc=new TatAndCrossCheckingTab();
				
				
				tcc.setEvent(event);
				tcc.setColorCode(colorCode);
				tcc.setNotification_one(notiOne);
				tcc.setNotification_two(notiTwo);
				tcc.setNotification_three(notiThree);
				tcc.setFinalAction(finalAction);
				tatAndCrossCheckingTabRepository.save(tcc);
				
		
				ds.setCrossChekingReport(true);
				ds.setTatReport(true);
				model.put("recordSave", "Data Submitted Succesfuly");
				 return "redirect:dynamictab";

			}
			else {
				{
//					model.put("errorMessage", "Field can't be empty");
					
					 model.put("errorMessage", "Invalid Credentials");
					 return "redirect:dynamictab";
		        
				}
			}
			
			
			
		
			
		}
	
 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 @RequestMapping(value="/add_notification", method = RequestMethod.POST)
		public  String addNotification(ModelMap model, @RequestParam String selected_plateform,@RequestParam String description)
		{
		 
			boolean isValidSource=notificationService.checkValidation(selected_plateform, description);
			if(isValidSource)
			{
				Notifications src=new Notifications();
				
				
				if(!plateFormsList.isEmpty())
				{
					for (PlateForms plateForms : plateFormsList) {
						
						if(plateForms.getId()==Integer.parseInt(selected_plateform))
						{
							src.setPlateForm(plateForms.getName());
							System.out.println("plateformsvalue"+plateForms.getName());
							break;
							
						}
						
					}
				}
				
				src.setDescription(description);
				PlateForms plateForms=new PlateForms();
				
				
			
				
				notificationRepository.save(src);
				
				
				model.put("recordSave", "Notification Added Succesfuly");
				 return "redirect:dynamictab";
		}
			else {
				{
//					model.put("errorMessage", "Field can't be empty");
					
					 model.put("errorMessage", "Invalid Credentials");
					 return "redirect:dynamictab";

		        
				}
			}
			
			
			
		
			
		}
	 
	 
	 
	 @RequestMapping(value="/add_user_rights", method = RequestMethod.POST)
		public  String addUserRights(ModelMap model, @RequestParam String userRights)
		{
		 
		 
			 
			 
			 
		 
			
			boolean isValidSource=appsService.checkValidation(userRights);
			if(isValidSource)
			{
				UserRights src=new UserRights();
				src.setDescription(userRights);
				userRepository.save(src);
				model.put("recordSave", "User Rights Added Succesfuly");
				
				ds.setUserRights(true);
				 return "redirect:dynamictab";

			}
			else {
				{
//					model.put("errorMessage", "Field can't be empty");
					
					 model.put("errorMessage", "Invalid Credentials");
					 ds.setUserRights(false);
						
					 return "redirect:dynamictab";

		        
				}
			}
			
			
			
		
			
		}
	
	 
	
	
	

	 @RequestMapping(value="/add_fuction", method = RequestMethod.POST)
	public @ResponseBody  String addNewFunction(ModelMap model, @RequestParam String name,@RequestParam String function )
	{
		
		boolean isValidSource=functionsService.validateFunctions(name, function);
		
		if(isValidSource)
		{
			
			
			 return "Field can't be empty";
		}
		else {
			{
				
				FunctionsList fun=new FunctionsList();
				fun.setName(name);
				fun.setFunName(function);
				functionsRepository.save(fun);
				
				
				//model.put("recordSave", "Source Added Succesfuly");
				
				 return "Source Added Succesfuly";
				
			}
		}
		
		
		
	
		
	}
	 
	 
	 
	 @RequestMapping(value="/add_app", method = RequestMethod.POST)
		public  String addNewApp(ModelMap model, @RequestParam String name)
		{
			
			boolean isValidSource=appsService.checkValidation(name);
			
			if(isValidSource)
			{
				
				
				Apps app=new Apps();
				app.setName(name);
			
				appRepository.save(app);
		
				model.put("recordSave", "Source Added Succesfuly");
				 return "redirect:dynamictab";
				
				
			
			}
			else {
				{
					
						model.put("errorMessage", "Field can't be empty");
						 return "redirect:dynamictab";
					
				}
			}
			
			
			
		
			
		}
	 
	 
	 
	 @RequestMapping(value="/add_software", method = RequestMethod.POST)
		public @ResponseBody String addSoftware(Model model, @RequestParam String input)
		{
			
			boolean isValidSource=appsService.checkValidation(input);
			
			if(isValidSource)
			{
				
				
				Softwares sw=new Softwares();
				sw.setSoftwareName(input);
				softwareRepositoty.save(sw);
				
				softwareList = (List<Softwares>) softwareRepositoty.findAll();
				model.addAttribute("softwareList",softwareList);
				 return "Software Added Succesfuly";
				
				
			
			}
			else {
				{
					
					return "Software not added";					
				}
			}
			
			
			
		
			
		}
	
	
	
	 
	 
	 
	 @RequestMapping(value="/add_app_menu", method = RequestMethod.POST)
		public @ResponseBody String addNewAppMenu(ModelMap model, @RequestParam String menuName)
		{
			
			boolean isValidSource=appsService.checkValidation(menuName);
			
			if(isValidSource)
			{
				
				
				Menu menu=new Menu();
				menu.setMenuName(menuName);
			
				menuRepository.save(menu);
		
				model.put("add_app_menu", "menu Added Succesfuly");
				 return "redirect:dynamictab";
				
				
			
			}
			else {
				{
					
						model.put("add_app_menu_e", "Field can't be empty");
						 return "redirect:dynamictab";
					
				}
			}
			
			
			
		
			
		}
	 
	 
	 
	 @RequestMapping(value="/add_main_menu", method = RequestMethod.POST)
		public @ResponseBody String addMenu(ModelMap model, @RequestParam String input)
		{
			
			boolean isValidSource=appsService.checkValidation(input);
			
			if(isValidSource)
			{
				
				
				MainMenu menu=new MainMenu();
				menu.setName(input);
			
				mainMenuRepository.save(menu);

				 return "menu Added Succesfuly";				
				
			
			}
			else {
				{
					
					
						 return "Field can't be empty";
					
				}
			}
			
			
			
		
			
		}
	
	
	
	 
	 @RequestMapping(value="/add_main_tab", method = RequestMethod.POST)
		public @ResponseBody  String addMainTab(ModelMap model, @RequestParam String input)
		{
			
			boolean isValidSource=appsService.checkValidation(input);
			
			if(isValidSource)
			{
				
				
				Tabs tabs=new Tabs();
				tabs.setTabName(input);
			
				tabReposity.save(tabs);
		
			
				 return "tab Added Succesfuly";

				
				
			
			}
			else {
				{
					
						
						 return "Field can't be empty";

					
				}
			}
			
			
			
		
			
		}
	
	
	 
	 
	 @RequestMapping(value="/add_module", method = RequestMethod.POST)
		public @ResponseBody String addModule(ModelMap model, @RequestParam String input)
		{
			
			boolean isValidSource=appsService.checkValidation(input);
			
			if(isValidSource)
			{
				
				
				Modules modules=new Modules();
				modules.setModuleName(input);
				moduleRepository.save(modules);
				return "Module Added Succesfuly";
				
				
			
			}
			else {
				{
					
					
						return "Field can't be empty";
					
				}
			}
			
			
			
		
			
		}
	
	
	 
	
	 
	 
	 
	 
	 @RequestMapping(value="/add_app_fuction", method = RequestMethod.POST)
		public  String addNewAppFunction(ModelMap model, @RequestParam String functionName)
		{
			
			boolean isValidSource=appsService.checkValidation(functionName);
			
			if(isValidSource)
			{
				MobileFunction fun=new MobileFunction();
				fun.setName(functionName);
			
				mobileFuntionRepository.save(fun);
		
				model.put("add_app_fuction", "Function Added Succesfuly");
				return "redirect:dynamictab";
				
				
			
			}
			else {
				{
					
						model.put("add_app_fuction_e", "Field can't be empty");
						return "redirect:dynamictab";					
				}
			}
			
			
			
		
			
		}
	
	
	 
	 
	 
	 
	 
	
	 @RequestMapping(value="/add_plateforms", method = RequestMethod.POST)
		public  String addNewPlateForms(ModelMap model, @RequestParam String name)
		{
			
			boolean isValidSource=appsService.checkValidation(name);
			
			if(isValidSource)
			{
				
				
				PlateForms pf=new PlateForms();
				pf.setName(name);
			
				plateFormsRepository.save(pf);
		
				model.put("add_plateforms", "PlateForms Added Succesfuly");
				return "redirect:dynamictab";
				
				
			
			}
			else {
				{
					
						model.put("add_plateforms_e", "Field can't be empty");
						return "redirect:dynamictab";					
				}
			}
			
			
			
		
			
		}
	
	
	

	 @RequestMapping(value="/add_sub_tabs", method = RequestMethod.POST)
		public @ResponseBody String addSubTabs(ModelMap model, @RequestParam String input)
		{
			
			boolean isValidSource=appsService.checkValidation(input);
			
			if(isValidSource)
			{
				
				
				SubTab pf=new SubTab();
				pf.setSubTabName(input);
			
				subTabRepository.save(pf);
		
				
				return "Sub Tab Added Succesfuly";
				
				
			
			}
			else {
				{
					
						
						return "Field can't be empty";					
				}
			}
			
			
			
		
			
		}
	
	
	
	
	
	
	 @RequestMapping(value="/add_placement", method = RequestMethod.POST)
		public  String addPlacements(ModelMap model, @RequestParam String name)
		{
			
			boolean isValidSource=appsService.checkValidation(name);
			
			if(isValidSource)
			{
				
				
				Placements pf=new Placements();
				pf.setName(name);
		
				placementsRepository.save(pf);
		
				model.put("add_placement", "Placements Added Succesfuly");
				return "redirect:dynamictab";
				
				
			
			}
			else {
				{
					
						model.put("add_placement_e", "Field can't be empty");
						return "redirect:dynamictab";
					
				}
			}
			
			
			
		
			
		}
	
	
	

	 @RequestMapping(value="/add_desktop_tab", method = RequestMethod.POST)
		public  String addDesktopTab(ModelMap model, @RequestParam String name)
		{
			
			boolean isValidSource=appsService.checkValidation(name);
			
			if(isValidSource)
			{
				
				
				DesktopTabs pf=new DesktopTabs();
				pf.setName(name);
		
				desktopTabRepository.save(pf);
		
				model.put("add_desktop_tab", "tab Added Succesfuly");
				return "redirect:dynamictab";		
				
				
			
			}
			else {
				{
					
						model.put("add_desktop_tab_e", "Field can't be empty");
						return "redirect:dynamictab";		
					
				}
			}
			
			
			
		
			
		}
	

	/*
	 @RequestMapping(value="/add_desktop_controls", method = RequestMethod.POST)
		public  String addDesktopControls(ModelMap model, @RequestParam String name)
		{
			
			boolean isValidSource=appsService.checkValidation(name);
			
			if(isValidSource)
			{
				
				
				Controls pf=new Controls();
				pf.setName(name);
		
				controlsRepositoy.save(pf);
		
				model.put("recordSave", "Controls Added Succesfuly");
				 return "dynamictab";
				
				
			
			}
			else {
				
					
						model.put("errorMessage", "Field can't be empty");
			            return  "dynamictab";
					
				
			}
			
			
			
		}
	*/
	
	
	 
	 @RequestMapping(value="/addDesktopFormDescription", method = RequestMethod.POST)
		public  String addDesktopFormDescription(ModelMap model, @RequestParam String placement,@RequestParam String tab
				, @RequestParam String s_tab,@RequestParam String controls,@RequestParam String name,@RequestParam String dataSource,@RequestParam String comment,@RequestParam String fnamee,@RequestParam String fsource )
		{
		 
			
			boolean isValidSource=desktopFormDescriptionService.checkValidation(placement,tab,s_tab,controls,name,dataSource,comment
					);
			
			if(isValidSource)
			{
				
				DesktopFormDescriptions pf=new DesktopFormDescriptions();
				pf.setPlacementName(placement);
				pf.setTab(tab);
				pf.setSelectedTab(s_tab);
				pf.setControlName(controls);
				pf.setName(name);
				pf.setDataSource(dataSource);
				pf.setComment(comment);
				pf.setFuntionId(1);
				pf.setFunctionName(fsource);
				pf.setfName(fnamee);
				
				
				
				
		
				desktopFromDescriptionRepository.save(pf);
		
				model.put("recordSave", "Controls Added Succesfuly");
				return "redirect:dynamictab";
				
				
			
			}
			
			else {
				
					
						model.put("errorMessage", "Field can't be empty");
						return "redirect:dynamictab";					
				
			}
			
		}
	 @RequestMapping(value="/saveDrafting", method = RequestMethod.POST)
		public @ResponseBody String saveDrafting(ModelMap model, @RequestParam String selectedSoftware,@RequestParam String selectedModule
				, @RequestParam String selectedMenu)
		{
		 
	ds.setSoftware(selectedSoftware);
	ds.setModule(selectedModule);
	ds.setMenu(selectedMenu);
				draftingRepository.save(ds);
				
			return "drafting saved succesfull";	
			
		}
	

	 
	@RequestMapping("/dynamictab")
	public String showform(Model m) {
		modulelist = (List<Modules>) moduleRepository.findAll();
		menuList = (List<Menu>) menuRepository.findAll();
		softwareList = (List<Softwares>) softwareRepositoty.findAll();
		tabList = (List<Tabs>) tabReposity.findAll();
		subTabList = (List<SubTab>) subTabRepository.findAll();
		functionList = (List<FunctionsList>) functionsRepository.findAll();
		placementList = (List<Placements>) placementsRepository.findAll();
		appList = (List<Apps>) appRepository.findAll();
		sourceList=(List<Source>)sourceRepository.findAll();
		plateFormsList=(List<PlateForms>)plateFormsRepository.findAll();
		mobileFuctionList=(List<MobileFunction>)mobileFuntionRepository.findAll();
		mainMenuList=(List<MainMenu>)mainMenuRepository.findAll();
		desktopTabList=(List<DesktopTabs>)desktopTabRepository.findAll();
		desktopFormDescriptionList=(List<DesktopFormDescriptions>)desktopFromDescriptionRepository.findAll();
		controlList=(List<Controls>)controlsRepositoy.findAll();
		
		m.addAttribute("moduleList", modulelist);
		m.addAttribute("menuList",menuList);
		m.addAttribute("softwareList",softwareList);
		m.addAttribute("tabList",tabList);
		m.addAttribute("subTabList",subTabList);
		m.addAttribute("sourceList",sourceList);
		m.addAttribute("functionList", functionList);
		m.addAttribute("placementList", placementList);
		m.addAttribute("appList",appList);
		m.addAttribute("plateFormsList",plateFormsList);
		m.addAttribute("mobileFuctionList",mobileFuctionList);
		m.addAttribute("mainMenuList",mainMenuList);
		m.addAttribute("desktopTabList",desktopTabList);
		m.addAttribute("controlList",controlList);	
		m.addAttribute("desktopFormDescriptionList",desktopFormDescriptionList);
		
				return "dynamictab";
			
	}
	
	
	@RequestMapping("/add_software")
	public String showde(Model m) {
		
		
		
		return "dynamictab";
			
	}
	
	
	@RequestMapping("/add_new_task")
	public String showdModule(Model m) {
		return "dynamictab";
			
	}@RequestMapping("/add_mobile_tab")
	public String showdMenu(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_tat_and_cross_checking_tab")
	public String showTab(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_fuction")
	public String showFunction(Model m) {
		
		
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_user_rights")
	public String show(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_notification")
	public String showNotification(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_app")
	public String showApp(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_app_menu")
	public String showdAppMenu(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_main_menu")
	public String showMainMenu(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_main_tab")
	public String showMainTab(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_sub_tabs")
	public String showSubTab(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_placement")
	public String showPlace(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_module")
	public String showModu(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_app_fuction")
	public String showAppFunction(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_plateforms")
	public String showPlateForm(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/add_desktop_tab")
	public String showDeskTopTAb(Model m) {
		
		
		
		return "dynamictab";
			
	}@RequestMapping("/addDesktopFormDescription")
	public String showDesktopFormDescription(Model m) {
		
		
		
		return "dynamictab";
			
	}	
	
	@RequestMapping("/testme")
	public String Tes(Model m) {
		
		
		
		return "welcomee";
			
	}	
	
	
	
	
	
	 @RequestMapping(value="/testme", method = RequestMethod.POST)
	public @ResponseBody String TestMe(Model m ,@RequestParam String input) {	
		
		
		return "welcomee"+input;
			
	}

	
}
